# nginx.conf  --  docker-openresty
#
# This file is installed to:
#   `/usr/local/openresty/nginx/conf/nginx.conf`
# and is the file loaded by nginx at startup,
# unless the user specifies otherwise.
#
# It tracks the upstream OpenResty's `nginx.conf`, but removes the `server`
# section and adds this directive:
#     `include /etc/nginx/conf.d/*.conf;`
#
# The `docker-openresty` file `nginx.vh.default.conf` is copied to
# `/etc/nginx/conf.d/default.conf`.  It contains the `server section
# of the upstream `nginx.conf`.
#
# See https://github.com/openresty/docker-openresty/blob/master/README.md#nginx-config-files
#

#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;
    
    server_tokens off;

    resolver 127.0.0.11 ipv6=off;

    #gzip  on;

    #此处通过lua_shared_dict定义的变量可在server块所引用的lua脚本内通过ngx.shared.变量名获取到,此处定义变量最大能使用的内存空间
    lua_shared_dict my_limit_req_store 100m;

    lua_shared_dict ip_blacklist 1m;

    #关闭lua代码缓存,每次代码更新后无需重启nginx即可生效
    lua_code_cache off;

    #lua库的绝对路径,此处引入后可在server块的lua脚本内通过require直接引入
    lua_package_path "/usr/local/openresty/nginx/lua/lua-resty-redis/lib/resty/?.lua;;";

    include /etc/nginx/conf.d/*.conf;
}
